openapi: 3.0.0
info:
  title: API post management
  description: Swagger api documentation
  version: 0.1.9
servers:
  - url: http://localhost:4000
tags: [{ name: 'Users', description: 'Endpoint api' }]
paths:
  /signup:
    post:
      sumary: Sign up
      description: Sign up a account user
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
  /signin:
    post:
      sumary: Sign in
      description: Sign in application
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Success
  /users/profile:
    get:
      sumary: Profile
      description: Get infomation of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
    put:
      sumary: Update Profile
      description: Update profile of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                  format: date
                gender:
                  type: boolean
                avatar:
                  type: string
      responses:
        '200':
          description: Success
  /posts/images:
    get:
      sumary: Images user
      description: Get list images of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: sort_by
          schema:
            type: string
          description: sort by attribute
        - in: query
          name: order_by
          schema:
            type: string
          description: sort ascending or descending
      responses:
        '200':
          description: Success
  /posts/images/{id}:
    put:
      sumary: Update caption image
      description: Use to update caption image
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: integer
          description: The image id
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                caption:
                  type: string
      responses:
        '200':
          description: Success
    delete:
      sumary: Update caption image
      description: Use to update caption image
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: integer
          description: The image id
      responses:
        '200':
          description: Success
  /users/images:
    get:
      sumary: Get all image 
      description: Get list images of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: The numbers of items to return
        - name: offset
          in: query
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - name: createdBy
          in: query
          schema:
            type: integer
          description: >
            all images of the specified user, 
            example: createdBy=1 get all images of user have id=1
        - name: following
          in: query
          schema:
            type: string
          description: >
            all images of following by signin user or followed by user
            example: following=true / following=false
        - name: search
          in: query
          schema:
            type: string
          description: >
            all images that need to fetch by caption, name userpost,
            example: search=chup dep , search=do thanh
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
          description: >
            The start date for the report when user post .
            Must be used together with `endDate`
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
          description: >
            The end date for the report when user post .
             Must be used together with `startDate`
      responses:
        '200':
          description: Success              
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        dob:
          type: string
          format: date
        gender:
          type: boolean
        avatar:
          type: string
      require:
        - id
        - first_name
        - last_name
        - email
        - password
        - dob
        - gender
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
        created_at:
          type: string
          format: date-time
        use_id:
          type: integer
          readOnly: true
      require:
        - id
        - created_at
        - user_id
    PostReact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        post_id:
          type: integer
          readOnly: true
      require:
        - id
        - post_id
        - user_id
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        path:
          type: string
        caption:
          type: string
        post_id:
          type: integer
          readOnly: true
      require:
        - id
        - path
        - post_id
    Follower:
      type: object
      properties:
        follower_id:
          type: integer
          readOnly: true
        followed_id:
          type: integer
          readOnly: true
      require:
        - follower_id
        - followed_id
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
        created_at:
          type: string
          format: date-time
        parent_cmt_id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        post_id:
          type: integer
          readOnly: true
      require:
        - id
        - text
        - created_at
        - user_id
        - post_id
    CommentReact:
      type: object
      properties:
        user_id:
          type: integer
          readOnly: true
        comment_id:
          type: integer
          readOnly: true
      require:
        - user_id
        - comment_id
    
  securitySchemes:
    bearerAuth:
      type: apiKey
      description: Enter your bearer token in the format `Bearer <token>`
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT
